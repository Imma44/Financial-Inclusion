# -*- coding: utf-8 -*-
"""Copy of Financial Inclusion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13q_f-_n1movKah_ekJ9_cBhIQsu2aXk_

# **1.Defining the question**

## **a)Specifying the Data Analytic question**
How can we predict which individuals are most likely to have or use a bank account while providing insights into some of key demographic factors that might drive individual financial outcome?

## **b)Metric for success**

## **c)Context**

## **d)Experimental design taken**

# **2.Univariate Analysis**

## Reading the data
"""

#Importing Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#Reading the data
df=pd.read_csv('http://bit.ly/FinancialDataset')
df.head()

df.tail()

"""## Examining the data"""

df.info()

df.shape

#Checking for null values
df.isnull().sum()

#Removing null values
df.dropna(inplace=True)

#Checking to see null values have been removed 
df.isnull().sum()

#Checking types of our variables
df.dtypes

#Renaming columns
df.rename(columns={'The relathip with head':'The relationship with head'},inplace=True)
df.rename(columns={'Level of Educuation':'Level_of_education'},inplace=True)
df.head()

df.value_counts()

"""## Detecting Outliers"""

df.plot(kind='box',figsize=(12,8))

#Checking for the outlier values in Year column
df['year'].value_counts()

#Examining outlier of year 2029
df.loc[df['year']== 2029]

#Examining outlier of year 2039
df.loc[df['year']== 2039]

#Examining outlier of year 2056
df.loc[df['year']== 2056]

#Dropping outliers
df.drop(df.index[df['year']==2029],inplace=True)
df.drop(df.index[df['year']==2039],inplace=True)
df.drop(df.index[df['year']==2056],inplace=True)

#Checking to see outliers have been dropped
df['year'].value_counts()

df.head()

"""## Visualising of Categorical Variables"""

#countries
df['country'].value_counts().plot(kind='bar',figsize=(12,8))
plt.title('Distribution of respondents in the countries')
plt.xlabel('Country')
plt.ylabel('Number of respondents')

#Bank account
df['Has a Bank account'].value_counts().plot(kind='bar',figsize=(12,8))
plt.title('Distribution of individuals with bank accounts')
plt.xlabel('Ownership or use of a bank account')
plt.ylabel('Number of respondents')

#Location
df['Type of Location'].value_counts().plot(kind='bar',figsize=(12,8))
plt.title('Distribution of individuals in locations')
plt.xlabel('Type of location')
plt.ylabel('Number of respondents')

#Cellphone access
df['Cell Phone Access'].value_counts().plot(kind='bar',figsize=(12,8))
plt.title('Distribution of individuals with access to cellphones')
plt.xlabel('Cellphone access')
plt.ylabel('Number of respondents')

#Gender
df['gender_of_respondent'].value_counts().plot(kind='bar',figsize=(12,8))
plt.title('Distribution of gender of respondents')
plt.xlabel('Gender')
plt.ylabel('Number of respondents')

#Relationship with head
df['The relationship with head'].value_counts().plot(kind='bar',figsize=(12,8))
plt.title('Distribution of relationship with head')
plt.xlabel('Relationship with head')
plt.ylabel('Number of respondents')

#Marital status
df['marital_status'].value_counts().plot(kind='bar',figsize=(12,8))
plt.title('Distribution of marital status')
plt.xlabel('Marital status')
plt.ylabel('Number of respondents')

#Level of education
df['Level_of_education'].value_counts().plot(kind='bar',figsize=(12,8))
plt.title('Distribution of level of education')
plt.xlabel('Level of education')
plt.ylabel('Number of respondents')

#Job type
df['Type of Job'].value_counts().plot(kind='bar',figsize=(12,8))
plt.title('Distribution of job type')
plt.xlabel('job type')
plt.ylabel('Number of respondents')

"""## Visualising Numerical Variables"""

df.describe()

#Skewness
print(df.skew())

#Kurtoisis
print(df.kurt())

#Household size
df['household_size'].hist(figsize=(12,8),rwidth=0.9)
plt.xlabel('Household size')
plt.ylabel('count')
plt.title('Histogram of household size')

#Respondent age
df['Respondent Age'].hist(figsize=(12,8),rwidth=0.9,grid=True)
plt.xlabel('Respondent age')
plt.ylabel('count')
plt.title('Histogram of respondent age')

"""## Summary

*	Rwanda has the highest number of respondents while Uganda has the leas
*	A high number of people do not have access or ownership to bank accounts
*	A majority of respondents from the conducted research live in rural areas
* A majority of people have access to cell phones
*	Female respondents are more than male respondents
*	The majority of respondents are heads of the household while the least number of respondents come from non-relatives
*	Most of the respondents are married/living together with the least number don't know their marital status
*	Most of the respondents have only managed to complete their level of education in Primary education
* A majority of respondents to the research are self employed
*	Most of the respondents live in households with less than 5 people
*	Majority of respondents are aged between 20-40

# **3.Bivariate Analysis**

Since possession or access to a bank account is our metric for success,we will use it to make comparisons to other variables.

## Numerical & Numerical Variables analysis
"""

df.corr()



"""## Categorical & Categorical Variables analysis"""

plt.figure(figsize=(12,8))
sns.countplot(df['country'],hue=df['Has a Bank account'])

plt.figure(figsize=(12,8))
sns.countplot(df['Type of Location'],hue=df['Has a Bank account'])

plt.figure(figsize=(12,8))
sns.countplot(df['gender_of_respondent'],hue=df['Has a Bank account'])
plt.title('Gender vs possession of bank account')

plt.figure(figsize=(12,8))
sns.countplot(df['The relationship with head'],hue=df['Has a Bank account'])
plt.title('Relationship with head vs possession of bank account')

plt.figure(figsize=(12,8))
sns.countplot(df['marital_status'],hue=df['Has a Bank account'])
plt.title('Marital status vs possession of bank account')

plt.figure(figsize=(12,8))
sns.countplot(df['Level_of_education'],hue=df['Has a Bank account'])
plt.xticks(rotation=45)
plt.title('Level of education vs possession of bank account')

plt.figure(figsize=(12,8))
sns.countplot(df['Type of Job'],hue=df['Has a Bank account'])
plt.xticks(rotation=45)
plt.title('Type of job vs possession of bank account')

plt.figure(figsize=(12,8))
sns.countplot(df['year'],hue=df['Has a Bank account'])
plt.title('Possession of bank account over the years')

"""## Numerical & Categorical Variables analysis"""

plt.figure(figsize=(12,8))
df[['Respondent Age','Has a Bank account']].plot(kind='bar',stacked=True)
plt.xticks(rotation=45)
plt.title('Possession of bank account over the years')
plt.legend()

"""# **3.Multivariate Analysis**"""

df[['Respondent Age','Has a Bank account']].plot(kind='bar',stacked=True,figsize=(12,8))

#Label encoding categorical variables to numerical
from sklearn.preprocessing import LabelEncoder
df.apply(LabelEncoder().fit_transform)

#Data Preprocessing
X=df.loc[:,['Has a Bank account']].values
Y=df.loc[:,['Cell Phone Access','country','household_size','Level_of_education','marital_status','Respondent Age','The relationship with head','Type of Job','Type of Location']].values

objList = df.select_dtypes(include = "object").columns
print (objList)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

for feat in objList:
    df[feat] = le.fit_transform(df[feat].astype(str))

print (df.info())

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
Y=le.fit_transform(Y)

df_col=list(df.columns)

for i in range(len(df_col)):
df[df_col[i]] = LabelEncoder().fit_transform(df[df_col[i]])

#Splitting data into train and test sets
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.20,random_state=0)

#Feature Scaling
from sklearn.preprocessing import StandardScaler
sc_x=StandardScaler()
X_train=sc_x.fit_transform(X_train)
X_test=sc_x.transform(X_test)